import "datatypes.thingml" from stl
import "../_lib/strings.thingml"

thing fragment SettingsMsgs {
	message Settings(
		controlPort : Long,
		observationPort : Long,
		simulationIP : StringD,
		runTime : Long,
		tooClose : Long,
		tooFar : Long,
		sampleRate : Long
	)
}

thing fragment SettingsClient includes SettingsMsgs {
	required port Loaded {
		receives Settings
	}
}

thing fragment SettingsParser includes SettingsMsgs, Strings
{
	property ConfigPath : StringD = "Challenge problem/Settings/config.txt"
	
	provided port Loaded {
		sends Settings
	}
	
	// Settings to load from the file
	property controlPort : Long= 0
	property observationPort : Long = 0
	property simulationIP : StringD = ""
	property runTime : Long = 0
	property tooClose : Long = 0
	property tooFar : Long = 0
	property sampleRate : Long = 0
	
	function HandleLine(line : StringD) do
		var option : StringD[2]
		SplitInto(line, "=", option)
		
		if (Equals(option[0], "controlPort")) do
			controlPort = ParseLong(option[1])
			return
		end
		if (Equals(option[0], "observationPort")) do
			observationPort = ParseLong(option[1])
			return
		end
		if (Equals(option[0], "runTime")) do
			runTime = ParseLong(option[1])
			return
		end
		if (Equals(option[0], "tooClose")) do
			tooClose = ParseLong(option[1])
			return
		end
		if (Equals(option[0], "tooFar")) do
			tooFar = ParseLong(option[1])
			return
		end
		if (Equals(option[0], "sampleRate")) do
			sampleRate = ParseLong(option[1])
			return
		end
	
	end
	
	abstract function ReadConfigFile(path : StringD)
	
	statechart Loader init LoadConfiguration {
		state LoadConfiguration @ignore "sink" {
			on entry do
				ReadConfigFile(ConfigPath)
				Loaded!Settings(controlPort, observationPort, simulationIP, runTime, tooClose, tooFar, sampleRate)
			end
		}
	}
}