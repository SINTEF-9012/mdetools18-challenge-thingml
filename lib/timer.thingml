import "datatypes.thingml" from stl

thing fragment TimerMsgs {
	message timer_start(id : UInt8, time : UInt32) @timer_start "true";
	message timer_cancel(id : UInt8) @timer_cancel "true";
	message timer_timeout(id : UInt8) @timeout "true";
}

thing fragment TimerClient includes TimerMsgs {
	required port Timer {
		sends timer_start, timer_cancel
		receives timer_timeout
	}
}

// Manage a set of software timers.
thing TimerJava includes TimerMsgs
@java_import "import java.util.*;"
@java_features "
	Hashtable<Integer, TimerTask> tasks = new Hashtable<Integer, TimerTask>();
	Timer timer = new java.util.Timer();"
{
	
	provided port timer {
		receives timer_start, timer_cancel
		sends timer_timeout
	}

    function startTimer(id: Integer, delay : UInt32) do
    	cancel(id)
        `final int t_id = `&id&`;`
        `TimerTask t =  new TimerTask() { public void run(){`
        	timer!timer_timeout(`t_id` as Integer) `
        } };
        tasks.put(t_id, t);
        timer.schedule(t, ` & delay & `);`
    end

    function cancel(id: Integer) do
    	`TimerTask t = tasks.get(`&id&`);`
        `if (t != null) t.cancel();`
        `timer.purge();`
    end

    statechart SoftTimer init default {
        state default {
          internal event m : timer?timer_start
            guard m.time > 0
            action startTimer(m.id, m.time)

          internal cancel
            event m : timer?timer_cancel
            action cancel(m.id)
        }
    }
}