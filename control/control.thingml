import "datatypes.thingml" from stl
import "../_lib/os.thingml"

import "../lib/timer.thingml"
import "../coms/communicator.thingml"
import "../lib/settings.thingml"

thing fragment ControlMsgs {
	message Power(
		left : Integer,
		right : Integer
	)
}

thing fragment Controller includes ControlMsgs {
	required port In {
		receives Power
	}
	
	provided port Out {
		sends Power
	}
}

thing fragment ControllerMuxer includes Controller, TimerClient, RoverClient, SettingsClient, OS {
	
	property ControlRate : UInt32 = 50
	property RunTime : UInt32 = 60000
	
	statechart Muxer init WaitForSettings {
		state WaitForSettings {
			transition -> WaitForStarted
			event settings : Loaded?Settings
			action RunTime = settings.runTime as UInt32
		}
		
		state WaitForStarted {
			transition -> Control
			event Rover?SimulationStarted
			action do
				Timer!timer_start(11, RunTime+1)
			end
		}
		
		state Control {
			on entry do
				Timer!timer_start(10, ControlRate)
				Out!Power(0, 0)
			end
			
			internal event power : In?Power
			action do
				var left : Integer = power.left
				var right : Integer = power.right
			
				// Reduce power if we are outside bounds
				if (left > 100) do
					var err : Integer = left - 100
					left = 100
					right = right - err
				end
				if (right > 100) do
					var err : Integer = right - 100
					right = 100
					left = left - err
				end
				if (left < -100) do
					var err : Integer = 100 - left
					left = -100
					right = right - err
				end
				if (right < -100) do
					var err : Integer = 100 - right
					right = -100
					left = left - err
				end
				
				// Send command to rover
				Rover!SetRoverLRPower(left, right)
				
				//println "Power: ", left, ", ", right
			end
			
			transition -> Control
			event t : Timer?timer_timeout
			guard (t.id == 10)
			
			transition -> Finished
			event t : Timer?timer_timeout
			guard (t.id == 11)
		}
		
		state Finished {
			on entry do
				println "Simulation finished, braking!"
				Rover!SetBrake(100)
				println "Bye :)"
				Exit(0)
			end
		}
	}
	
}