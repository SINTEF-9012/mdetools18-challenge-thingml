import "../_lib/strings.thingml"
import "../_lib/os.thingml"

import "../lib/settings.thingml"
import "socket.thingml"

thing fragment CommunicatorMsgs {
	message Ready()
	message SimulationStarted()
	
	message SetRoverLRPower(left : Integer, right : Integer)
	message SetBrake(brake : Integer)
	message GetRoverPosition()
	message GetRoverCompass()
	message RoverPosition(x : Double, y : Double)
	message RoverCompass(phi : Double)
	
	message LeaderStart()
	message GetLeaderPosition()
	message GetLeaderDistance()
	message LeaderPosition(x : Double, y : Double)
	message LeaderDistance(d : Double)
}

thing fragment RoverClient includes CommunicatorMsgs {
	required port Rover {
		sends SetRoverLRPower, SetBrake, GetRoverPosition, GetRoverCompass
		receives RoverPosition, RoverCompass
		receives Ready, SimulationStarted
	}
}

thing fragment LeaderClient includes CommunicatorMsgs {
	required port Leader {
		sends LeaderStart, GetLeaderPosition, GetLeaderDistance
		receives LeaderPosition, LeaderDistance
		receives Ready, SimulationStarted
	}
}

thing fragment Communicator includes SettingsClient, SocketMsgs, CommunicatorMsgs, Strings, OS {
	
	required port ControlSocket {
		sends Open, Out
		receives WasOpened/*, WasClosed */, In
	}
	
	required port ObservationSocket {
		sends Open, Out
		receives WasOpened/*, WasClosed */, In
	}
	
	provided port Rover {
		sends Ready, SimulationStarted
		sends RoverPosition, RoverCompass
		receives SetRoverLRPower, SetBrake, GetRoverPosition, GetRoverCompass
	}
	
	provided port Leader {
		sends Ready, SimulationStarted
		sends LeaderPosition, LeaderDistance
		receives LeaderStart, GetLeaderPosition, GetLeaderDistance
	}
	
	statechart Comms init WaitForSettings {
		property controlPort : Long
		property observationPort : Long
		property simulationIP : StringD
		
		state WaitForSettings {
			transition -> OpenControlPort
			event settings : Loaded?Settings
			action do
				controlPort = settings.controlPort
				observationPort = settings.observationPort
				simulationIP = settings.simulationIP
			end
		}
		
		state OpenControlPort {
			on entry ControlSocket!Open(simulationIP, controlPort)
			transition -> OpenObservationPort event ControlSocket?WasOpened
		}
		
		state OpenObservationPort {
			on entry ObservationSocket!Open(simulationIP, observationPort)
			transition -> Communicate event ObservationSocket?WasOpened
		}
		
		composite state Communicate init Ready @ignore "sink" {
			state Ready @ignore "sink" {
				on entry do
					println "Ready to communicate!"
					Leader!Ready()
					Leader!Ready()
				end
			}
			
			region Rover init WaitForCommand {
				state WaitForCommand {
					transition -> WaitForCommand
					event power : Rover?SetRoverLRPower
					action ControlSocket!Out("Rover,setLRPower("+FormatInteger(power.left)+","+FormatInteger(power.right)+")")
					
					transition -> WaitForCommand
					event brake : Rover?SetBrake
					action ControlSocket!Out("Rover,brake("+FormatInteger(brake.brake)+")")
					
					transition -> WaitForPosition
					event Rover?GetRoverPosition
					action ControlSocket!Out("Rover,GPS()")
					
					transition -> WaitForCompass
					event Rover?GetRoverCompass
					action ControlSocket!Out("Rover,getCompass()")
				}
				
				state WaitForPosition {
					transition -> WaitForCommand
					event response : ControlSocket?In
					action do
						var parts : StringD[4]
						SplitInto(response.line, ",|;", parts)
						if (Equals(parts[0], "Rover")) do
							var x : Double = ParseDouble(parts[1])
							var y : Double = ParseDouble(parts[2])
							Rover!RoverPosition(x, y)
						end else do
							errorln "Something wrong on line: ", response.line
							errorln "Expected: Rover, <double>, <double>;"
							Exit(3)
						end
					end
				}
				
				state WaitForCompass {
					transition -> WaitForCommand
					event response : ControlSocket?In
					action do
						var parts : StringD[3]
						SplitInto(response.line, ",|;", parts)
						if (Equals(parts[0], "Rover")) do
							var phi : Double = ParseDouble(parts[1])
							Rover!RoverCompass(phi)
						end else do
							errorln "Something wrong on line: ", response.line
							errorln "Expected: Rover, <double>;"
							Exit(3)
						end
					end
				}
			}
			
			region Leader init WaitForCommand {
				state WaitForCommand {
					transition -> WaitForSimulationStarted
					event Leader?LeaderStart
					action ObservationSocket!Out("ready")
					
					transition -> WaitForPosition
					event Leader?GetLeaderPosition
					action ObservationSocket!Out("Leader,GPS()")
					
					transition -> WaitForDistance
					event Leader?GetLeaderDistance
					action ObservationSocket!Out("Leader,Distance()")
				}
				
				state WaitForSimulationStarted {
					transition -> WaitForCommand
					event ObservationSocket?In
					action do
						Rover!SimulationStarted()
						Leader!SimulationStarted()
					end
					// TODO: Perhaps check the line?
				}
				
				state WaitForPosition {
					transition -> WaitForCommand
					event response : ObservationSocket?In
					action do
						var parts : StringD[4]
						SplitInto(response.line, ",|;", parts)
						if (Equals(parts[0], "Leader")) do
							var x : Double = ParseDouble(parts[1])
							var y : Double = ParseDouble(parts[2])
							Leader!LeaderPosition(x, y)
						end else do
							errorln "Something wrong on line: ", response.line
							errorln "Expected: Leader, <double>, <double>;"
							Exit(3)
						end 
					end
				}
				
				state WaitForDistance {
					transition -> WaitForCommand
					event response : ObservationSocket?In
					action do
						var parts : StringD[3]
						SplitInto(response.line, ",|;", parts)
						if (Equals(parts[0], "Leader")) do
							var d : Double = ParseDouble(parts[1])
							Leader!LeaderDistance(d)
						end else do
							errorln "Something wrong on line: ", response.line
							errorln "Expected: Leader, <double>;"
							Exit(3)
						end
					end
				}
			}
		}
	}
}